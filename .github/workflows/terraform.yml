name: Terraform-azure-connection

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  id-token: write    # REQUIRED for OIDC authentication
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Show Azure context
        run: |
          az account show
          az group list

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GH_PAT }}  # ‚úÖ Correct input name is 'token'

      - name: Render Terraform Docs and Commit
        uses: terraform-docs/gh-actions@v1.4.1
        with:
          working-dir: .
          output-file: README-terraform-resources.md
          output-method: inject
          git-push: "true"
          git-push-user-name: "github-actions[bot]"
          git-push-user-email: "41898282+github-actions[bot]@users.noreply.github.com"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}  # ‚úÖ Required for commit access


  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, test, prod]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint on Terraform code
        run: tflint --recursive

      - name: Run tfsec (Terraform Security Scanner)
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # üëâ Terraform Docs step
      - name: Generate Terraform Docs
        uses: terraform-docs/gh-actions@v1.4.1
        with:
          working-dir: .
          output-file: README-Terraform.md
          output-method: replace
          config-file: .terraform-docs.yml

      - name: Terraform Init
        run: terraform init

      - name: Select/Create Workspace
        run: terraform workspace select -or-create ${{ matrix.environment }}

      - name: Terraform Plan
        run: terraform plan -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" -var="workflow=${{ matrix.environment }}"

      - name: Check tags using Terratag v0.7.2
        run: |
          echo "üì• Downloading Terratag v0.7.2..."
          curl -Lo terratag.tar.gz https://github.com/env0/terratag/releases/download/v0.7.2/terratag_0.7.2_linux_amd64.tar.gz
          
          echo "üì¶ Extracting Terratag..."
          tar zxvf terratag.tar.gz
          
          echo "üîß Installing Terratag..."
          chmod +x terratag
          sudo mv terratag /usr/local/bin/
          
          echo "‚úÖ Terratag version:"
          terratag --version
          
          echo "üè∑Ô∏è Check tagging of all the Terraform files with Terratag..."

          terratag -dir . \
            -tags="{\"environment\":\"${{ matrix.environment }}\", \"project\":\"multi-env-demo\", \"owner\":\"devops\"}" -type terraform

      - name: Terraform Apply
        run: terraform apply -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" -var="workflow=${{ matrix.environment }}" -var="username=${{ secrets.VM_USERNAME }}" -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" --auto-approve

      - name: Terraform Destroy
        run: terraform destroy -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" -var="workflow=${{ matrix.environment }}" -var="username=${{ secrets.VM_USERNAME }}" -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" --auto-approve