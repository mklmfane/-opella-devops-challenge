name: Terraform-azure-connection

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  id-token: write    # REQUIRED for OIDC authentication
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Show Azure context
        run: |
          az account show
          az group list

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}  # ✅ Must be provided explicitly
          fetch-depth: 0  # Optional: fetch full history if needed

      - name: Generate Terraform Docs and Commit
        uses: terraform-docs/gh-actions@v1.4.1
        with:
          working-dir: .
          output-file: README-terraform-resources.md
          output-method: inject
          git-push: "true"
          git-push-user-name: "github-actions[bot]"
          git-push-user-email: "41898282+github-actions[bot]@users.noreply.github.com"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}  # Required to allow commits

  deploy:
    needs: [build, docs]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, test, prod]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2  # ✅ Or latest stable version
          terraform_wrapper: false

      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Initialize TFLint
        run: tflint --init

      - name: Run TFLint on Terraform code
        run: tflint --recursive

      - name: Terraform Init
        run: terraform init

      - name: Select/Create Workspace
        run: terraform workspace select -or-create ${{ matrix.environment }}

      - name: Terraform Plan
        id: terraform_plan
        run: terraform plan -no-color -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" -var="workflow=${{ matrix.environment }}" -out=tfplan.binary

      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: latest    

      - name: Run OPA Policy Check
        id: opa_eval
        if: steps.terraform_plan.conclusion == 'success'
        continue-on-error: true  # This allows the step to fail without failing the entire job
        run: |
          terraform show -json tfplan.binary | grep '^{.*}$' > tfplan.json
          result=$(opa eval --format json --input tfplan.json --data policy 'data.terraform.analysis.deny')
          echo "OPA evaluation result: $result"

          count=$(echo "$result" | jq '.result[].expressions[].value | length')
          if [ "$count" -gt 0 ]; then
            echo "❌ OPA Deny policy failed with $count violation(s)."
            exit 1
          else
            echo "✅ No deny violations found."
          fi
      
      - name: Run OPA Tests
        id: opa_tests
        continue-on-error: true  # This allows the step to fail without failing the entire job
        run: opa test policy/*.rego -v    

      - name: Check tags using Terratag v0.7.2
        run: |
          echo "📥 Downloading Terratag v0.7.2..."
          curl -Lo terratag.tar.gz https://github.com/env0/terratag/releases/download/v0.7.2/terratag_0.7.2_linux_amd64.tar.gz
          
          echo "📦 Extracting Terratag..."
          tar zxvf terratag.tar.gz
          
          echo "🔧 Installing Terratag..."
          chmod +x terratag
          sudo mv terratag /usr/local/bin/
          
          echo "✅ Terratag version:"
          terratag --version
  
          echo "🏷️ Check tagging of all the Terraform files with Terratag..."
          terratag -dir . \
            -tags="{\"environment\":\"${{ matrix.environment }}\", \"project\":\"multi-env-demo\", \"owner\":\"devops\"}" -type terraform
    

      - name: Terraform Apply
        if: steps.terraform_plan.conclusion == 'success'
        run: terraform apply tfplan.binary
        
      - name: Terraform Destroy
        run: terraform destroy -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" -var="workflow=${{ matrix.environment }}" -auto-approve