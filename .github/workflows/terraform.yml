name: Terraform-azure-connection

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  id-token: write    # REQUIRED for OIDC authentication
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Show Azure context
        run: |
          az account show
          az group list

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}  # ✅ Must be provided explicitly
          fetch-depth: 0  # Optional: fetch full history if needed

      - name: Generate Terraform Docs and Commit
        uses: terraform-docs/gh-actions@v1.4.1
        with:
          working-dir: .
          output-file: README-terraform-resources.md
          output-method: inject
          git-push: "true"
          git-push-user-name: "github-actions[bot]"
          git-push-user-email: "41898282+github-actions[bot]@users.noreply.github.com"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}  # Required to allow commits

  deploy:
    needs: [build, docs]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, test, prod]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2  # ✅ Or latest stable version

      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Initialize TFLint
        run: tflint --init

      - name: Run TFLint on Terraform code
        run: tflint --recursive

      - name: Run tfsec (Terraform Security Scanner)
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Init
        run: terraform init

      - name: Select/Create Workspace
        run: terraform workspace select -or-create ${{ matrix.environment }}

      - name: Terraform Plan
        id: terraform_plan
        run: terraform plan -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" -var="workflow=${{ matrix.environment }}" -out=tfplan.binary

      - name: Save Plan as JSON
        id: save_plan_json
        if: steps.terraform_plan.outcome == 'success'
        run: |
          echo "📦 Converting Terraform binary plan to JSON..."
          terraform show -no-color -json tfplan.binary > .terraform-plan.json

          echo "🧪 Validating and formatting JSON..."
          if jq . .terraform-plan.json > formatted.json 2>/dev/null; then
            echo "✅ Valid JSON file. Formatted preview (first 20 lines):"
            head -n 20 formatted.json
            mv formatted.json .terraform-plan.json
          else
            echo "❌ Could not parse .terraform-plan.json as valid JSON"
            echo "🔍 Showing raw output from .terraform-plan.json:"
            cat .terraform-plan.json
            rm -f formatted.json
            exit 1
          fi
    
      - name: Follow provisioning policies in terraform for Azure VNET and Azure VM
        if: success()
        run: |
          curl -sL https://github.com/open-policy-agent/conftest/releases/download/v0.62.0/conftest_0.62.0_Linux_x86_64.tar.gz | tar xz
          chmod +x conftest
          sudo mv conftest /usr/local/bin/
          conftest test -p policy .terraform-plan.json    

      - name: Check tags using Terratag v0.7.2
        run: |
          echo "📥 Downloading Terratag v0.7.2..."
          curl -Lo terratag.tar.gz https://github.com/env0/terratag/releases/download/v0.7.2/terratag_0.7.2_linux_amd64.tar.gz
          
          echo "📦 Extracting Terratag..."
          tar zxvf terratag.tar.gz
          
          echo "🔧 Installing Terratag..."
          chmod +x terratag
          sudo mv terratag /usr/local/bin/
          
          echo "✅ Terratag version:"
          terratag --version
  
          echo "🏷️ Check tagging of all the Terraform files with Terratag..."
          terratag -dir . \
            -tags="{\"environment\":\"${{ matrix.environment }}\", \"project\":\"multi-env-demo\", \"owner\":\"devops\"}" -type terraform
    
      - name: Terraform Apply
        if: steps.policy_confest.outcome == 'ok'
        run: terraform apply -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" -var="workflow=${{ matrix.environment }}" -var="username=${{ secrets.VM_USERNAME }}" -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" --auto-approve

      - name: Terraform Destroy
        run: terraform destroy -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" -var="workflow=${{ matrix.environment }}" -var="username=${{ secrets.VM_USERNAME }}" -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" --auto-approve