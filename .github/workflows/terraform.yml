name: Terraform-azure-connection

on:
  workflow_dispatch:
  push:
    branches:
      - master

permissions:
  id-token: write    # REQUIRED for OIDC
  contents: read

jobs:
  setup-oidc:
    runs-on: ubuntu-latest
    outputs:
      AZURE_CLIENT_ID: ${{ steps.oidc-setup.outputs.AZURE_CLIENT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ steps.oidc-setup.outputs.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ steps.oidc-setup.outputs.AZURE_TENANT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI login using existing credentials
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Run OIDC SP + federated credential setup script
        id: oidc-setup
        run: |
          GH_REPO="${{ secrets.GH_REPO }}"
          AZ_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          AZ_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"

          echo "### Creating OIDC Service Principal"
          az ad sp create-for-rbac --name "gh-oidc-sp" --skip-assignment || echo "SP may already exist"

          AZURE_CLIENT_ID=$(az ad sp list --display-name "gh-oidc-sp" --query '[0].appId' -o tsv)

          echo "### Ensuring Contributor Role Assignment"
          az role assignment create \
            --assignee "$AZURE_CLIENT_ID" \
            --role "Contributor" \
            --scope "/subscriptions/$AZ_SUBSCRIPTION_ID" || echo "Role may already exist"

          echo "### Creating Federated Credential for OIDC"
          az ad app federated-credential create --id $AZURE_CLIENT_ID \
            --parameters '{
              "name": "github-oidc-federation",
              "issuer": "https://token.actions.githubusercontent.com",
              "subject": "repo:'$GH_REPO':ref:refs/heads/master",
              "description": "GitHub OIDC connection for Terraform",
              "audiences": ["api://AzureADTokenExchange"]
          }' || echo "Federated credential may already exist"

          echo "::set-output name=AZURE_CLIENT_ID::$AZURE_CLIENT_ID"
          echo "::set-output name=AZURE_SUBSCRIPTION_ID::$AZ_SUBSCRIPTION_ID"
          echo "::set-output name=AZURE_TENANT_ID::$AZ_TENANT_ID"

  build:
    needs: setup-oidc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Show Azure context
        run: |
          az account show
          az group list

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, test, prod]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Select/Create Workspace
        run: terraform workspace select -or-create ${{ matrix.environment }}

      - name: Terraform Plan
        run: terraform plan -var="workflow=${{ matrix.environment }}"